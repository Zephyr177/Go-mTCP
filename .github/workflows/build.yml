# .github/workflows/build.yml

name: Golang 跨平台构建

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

jobs:
  build:
    name: Build for ${{ matrix.os }} (${{ matrix.target }})
    runs-on: ubuntu-latest # 所有平台都可以在 ubuntu-latest 上交叉编译，以节省资源

    strategy:
      # fail-fast: false 可以让一个任务失败后，其他矩阵中的任务继续运行
      fail-fast: false
      matrix:
        include:
          # --- 现有平台 ---
          - goos: linux
            goarch: amd64
            target: linux-amd64
          - goos: windows
            goarch: amd64
            target: windows-amd64
          - goos: darwin
            goarch: amd64
            target: darwin-amd64
          - goos: darwin
            goarch: arm64
            target: darwin-arm64
          # --- 新增平台 ---
          - goos: linux
            goarch: arm64
            target: linux-arm64
          - goos: linux
            goarch: arm
            goarm: '7' # 指定 ARM 版本为 v7
            target: linux-armv7
          - goos: android
            goarch: arm64
            target: android-arm64
          - goos: android
            goarch: arm
            goarm: '7' # 指定 ARM 版本为 v7
            target: android-armv7

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Go 环境
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'

      - name: 下载依赖
        run: go mod download

      - name: 构建
        run: |
          # 定义需要构建的应用程序目录列表
          APPS="client pipeserver remote"
          
          # 创建存放构建结果的目录
          OUTPUT_DIR="dist"
          mkdir -p $OUTPUT_DIR

          # 准备环境变量字符串
          BUILD_ENV="GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }}"
          # 如果 goarm 变量被定义了，就添加到环境变量中
          if [[ -n "${{ matrix.goarm }}" ]]; then
            BUILD_ENV="$BUILD_ENV GOARM=${{ matrix.goarm }}"
          fi

          for app in $APPS; do
            echo "==> Building $app for ${{ matrix.target }}"
            
            # 为 Windows 系统添加 .exe 后缀
            BINARY_NAME="$app-${{ matrix.target }}"
            if [ "${{ matrix.goos }}" = "windows" ]; then
              BINARY_NAME="$BINARY_NAME.exe"
            fi
            
            # 使用准备好的环境变量进行交叉编译
            # -v: 打印编译的包名
            # -ldflags="-s -w": 减小二进制文件大小
            # -o: 指定输出路径和文件名
            env $BUILD_ENV go build -v -ldflags="-s -w" -o "${OUTPUT_DIR}/${BINARY_NAME}" "./${app}"
          done

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          # artifact 的名称，使用 target 命名以作区分
          name: binaries-${{ matrix.target }}
          path: dist/
